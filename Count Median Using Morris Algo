/* Java program to find the median of BST in O(n) 
time and O(1) space*/
class GfG { 

/* A binary search tree Node has data, pointer 
to left child and a pointer to right child */
static class Node 
{ 
	int data; 
	Node left, right; 
} 

// A utility function to create a new BST node 
static Node newNode(int item) 
{ 
	Node temp = new Node(); 
	temp.data = item; 
	temp.left = null; 
	temp.right = null; 
	return temp; 
} 

/* A utility function to insert a new node with 
given key in BST */
static Node insert(Node node, int key) 
{ 
	/* If the tree is empty, return a new node */
	if (node == null) return newNode(key); 

	/* Otherwise, recur down the tree */
	if (key < node.data) 
		node.left = insert(node.left, key); 
	else if (key > node.data) 
		node.right = insert(node.right, key); 

	/* return the (unchanged) node pointer */
	return node; 
} 

/* Function to count nodes in a binary search tree 
using Morris Inorder traversal*/
static int counNodes(Node root) 
{ 
	Node current , pre;
	int count = 0;
	if(root == null)return 0;
	
	current = root;
	while(current != null){
	if(current.left == null){
	    count++;
	    
	    current = current.right;
	}
	
	else {
	    pre = current.left;
	    
	    while(pre.right != null && pre.right != current){
	        pre = pre.right;
	    }
	    
	    if(pre.right == null){
	        pre.right = current;
	        
	        current = current.left;
	    }
	    else {
	        pre.right = null;
	        count++;
	        
	        current = current.right;
	    }
	}
}
	return count;
} 


/* Function to find median in O(n) time and O(1) space 
using Morris Inorder traversal*/
static int findMedian(Node root) 
{
    if(root == null)return 0;
    
    int count = counNodes(root);
    int currCount = 0;
    Node current = root , pre = null , prev = null;
    
    while(current != null){
        if(current.left == null){
            currCount++;
            
            // odd case :
            
            if(count % 2 != 0 && currCount == (count+1 / 2)){
                return prev.data;
            }
            
            else if(count % 2 == 0 && currCount == (count / 2) + 1){
                return (current.data + prev.data) / 2;
            }
                
            
            prev = current;
            current = current.right;
        }
        
        else{
            pre = current.left;
            
            while(pre.right != null && pre.right != current){
                pre = pre.right;
            }
            
            if(pre.right == null){
                pre.right = current;
                current = current.left;
            }
            
            else {
                pre.right = null;
                
                currCount++;
                
                if (count % 2 != 0 && currCount == (count+1)/2 )  
                    return current.data;  
                else if (count%2==0 && currCount == (count/2)+1)  
                    return (prev.data+current.data)/2;  
                    
                    prev = current;
                    current = current.right;
            }
        }
    }


    return -1;
    
}


/* Driver code*/
public static void main(String[] args) 
{ 

	/* Let us create following BST 
				50 
			/ \ 
			30 70 
			/ \ / \ 
		20 40 60 80 */
	Node root = null; 
	root = insert(root, 50); 
	insert(root, 30); 
	insert(root, 20); 
	insert(root, 40); 
	insert(root, 70); 
	insert(root, 60); 
	insert(root, 80); 

	System.out.println("Median of BST is " + findMedian(root)); 
} 
} 

// This code is contributed by prerna saini. 
